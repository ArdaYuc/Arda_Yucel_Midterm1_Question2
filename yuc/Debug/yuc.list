
yuc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103c8  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000111  00000000  00000000  000103f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000ad  00000000  00000000  00010503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  000105b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  00010628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000ae3  00000000  00000000  00010688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000001a1  00000000  00000000  0001116b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002ea1  00000000  00000000  0001130c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000141ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000120  00000000  00000000  00014200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003a8 	.word	0x080003a8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003a8 	.word	0x080003a8

080001e8 <init_leds>:
//a+r+d+a ascii değerleri için 408 oluyor.
//408 mod 4=0 kırmızı led
//y+u+c+e+l ascii değerleri için 546 oluyor.
//546 mod 4=2 turuncu led

void init_leds(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

rccahblenR = gpiodmask;
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <init_leds+0x28>)
 80001ee:	2208      	movs	r2, #8
 80001f0:	601a      	str	r2, [r3, #0]
gpiodModr=gpiodP14mask;
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <init_leds+0x2c>)
 80001f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001f8:	601a      	str	r2, [r3, #0]
gpiodModr |=gpiodP13mask;
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <init_leds+0x2c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a05      	ldr	r2, [pc, #20]	; (8000214 <init_leds+0x2c>)
 8000200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000204:	6013      	str	r3, [r2, #0]

}
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	40023830 	.word	0x40023830
 8000214:	40020c00 	.word	0x40020c00

08000218 <turn_name_on>:

void turn_name_on(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

gpiodOdr=gpiodp14onmask;
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <turn_name_on+0x14>)
 800021e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000222:	601a      	str	r2, [r3, #0]

}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	40020c14 	.word	0x40020c14

08000230 <turn_name_off>:
void turn_name_off(){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0

gpiodOdr&=gpiodp14ofmask;
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <turn_name_off+0x18>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <turn_name_off+0x18>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]

}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40020c14 	.word	0x40020c14

0800024c <turn_surname_on>:
void turn_surname_on(){
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

gpiodOdr|=gpiodp13onmask;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <turn_surname_on+0x18>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <turn_surname_on+0x18>)
 8000256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800025a:	6013      	str	r3, [r2, #0]

}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40020c14 	.word	0x40020c14

08000268 <turn_surname_off>:
void turn_surname_off(){
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

gpiodOdr&=gpiodp13ofmask;
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <turn_surname_off+0x18>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a03      	ldr	r2, [pc, #12]	; (8000280 <turn_surname_off+0x18>)
 8000272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000276:	6013      	str	r3, [r2, #0]

}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40020c14 	.word	0x40020c14

08000284 <delayy>:

void delayy(){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
for(int i=0;i<0x00000FFF;i++){
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	e002      	b.n	8000296 <delayy+0x12>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f640 72fe 	movw	r2, #4094	; 0xffe
 800029c:	4293      	cmp	r3, r2
 800029e:	ddf7      	ble.n	8000290 <delayy+0xc>

}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <main>:


int main() {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

init_leds();
 80002b0:	f7ff ff9a 	bl	80001e8 <init_leds>

while(a<4){
 80002b4:	e00c      	b.n	80002d0 <main+0x24>
	turn_name_on();
 80002b6:	f7ff ffaf 	bl	8000218 <turn_name_on>
	delayy();
 80002ba:	f7ff ffe3 	bl	8000284 <delayy>
	delayy();
 80002be:	f7ff ffe1 	bl	8000284 <delayy>
	turn_name_off();
 80002c2:	f7ff ffb5 	bl	8000230 <turn_name_off>
	a = a+1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <main+0x58>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	3301      	adds	r3, #1
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <main+0x58>)
 80002ce:	6013      	str	r3, [r2, #0]
while(a<4){
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <main+0x58>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b03      	cmp	r3, #3
 80002d6:	ddee      	ble.n	80002b6 <main+0xa>

}


while(y<5){
 80002d8:	e00c      	b.n	80002f4 <main+0x48>
	turn_surname_on();
 80002da:	f7ff ffb7 	bl	800024c <turn_surname_on>
	delayy();
 80002de:	f7ff ffd1 	bl	8000284 <delayy>
	delayy();
 80002e2:	f7ff ffcf 	bl	8000284 <delayy>
	turn_surname_off();
 80002e6:	f7ff ffbf 	bl	8000268 <turn_surname_off>
	y = y+1;
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <main+0x5c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	3301      	adds	r3, #1
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <main+0x5c>)
 80002f2:	6013      	str	r3, [r2, #0]
while(y<5){
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <main+0x5c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b04      	cmp	r3, #4
 80002fa:	ddee      	ble.n	80002da <main+0x2e>

}

return 0;
 80002fc:	2300      	movs	r3, #0
}
 80002fe:	4618      	mov	r0, r3
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	2000001c 	.word	0x2000001c
 8000308:	20000020 	.word	0x20000020

0800030c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000310:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 f811 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ffb5 	bl	80002ac <main>

08000342 <LoopForever>:

LoopForever:
    b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	20000024 	.word	0x20000024

0800035c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC_IRQHandler>
	...

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	4d0d      	ldr	r5, [pc, #52]	; (8000398 <__libc_init_array+0x38>)
 8000364:	4c0d      	ldr	r4, [pc, #52]	; (800039c <__libc_init_array+0x3c>)
 8000366:	1b64      	subs	r4, r4, r5
 8000368:	10a4      	asrs	r4, r4, #2
 800036a:	2600      	movs	r6, #0
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	4d0b      	ldr	r5, [pc, #44]	; (80003a0 <__libc_init_array+0x40>)
 8000372:	4c0c      	ldr	r4, [pc, #48]	; (80003a4 <__libc_init_array+0x44>)
 8000374:	f000 f818 	bl	80003a8 <_init>
 8000378:	1b64      	subs	r4, r4, r5
 800037a:	10a4      	asrs	r4, r4, #2
 800037c:	2600      	movs	r6, #0
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f855 3b04 	ldr.w	r3, [r5], #4
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
